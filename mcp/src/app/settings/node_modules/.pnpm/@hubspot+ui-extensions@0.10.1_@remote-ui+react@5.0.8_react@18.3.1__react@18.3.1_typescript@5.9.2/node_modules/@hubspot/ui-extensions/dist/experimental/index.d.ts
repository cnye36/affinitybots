import type * as types from '../types';
import type * as experimentalTypes from './types';
export { useCrmProperties } from '../crm/hooks/useCrmProperties';
export { useAssociations } from '../crm/hooks/useAssociations';
/** @experimental This component is experimental. Avoid using it in production due to potential breaking changes. Your feedback is valuable for improvements. Stay tuned for updates. */
declare const Iframe: "Iframe" & {
    readonly type?: "Iframe" | undefined;
    readonly props?: types.IframeProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Iframe", types.IframeProps, true>>;
/** @experimental This component is experimental. Avoid using it in production due to potential breaking changes. Your feedback is valuable for improvements. Stay tuned for updates. */
declare const MediaObject: "MediaObject" & {
    readonly type?: "MediaObject" | undefined;
    readonly props?: experimentalTypes.MediaObjectProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"MediaObject", experimentalTypes.MediaObjectProps, true>>;
/** @experimental This component is experimental. Avoid using it in production due to potential breaking changes. Your feedback is valuable for improvements. Stay tuned for updates. */
declare const Stack2: "Stack2" & {
    readonly type?: "Stack2" | undefined;
    readonly props?: experimentalTypes.Stack2Props | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Stack2", experimentalTypes.Stack2Props, true>>;
/** @experimental This component is experimental. Avoid using it in production due to potential breaking changes. Your feedback is valuable for improvements. Stay tuned for updates. */
declare const Center: "Center" & {
    readonly type?: "Center" | undefined;
    readonly props?: experimentalTypes.CenterProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Center", experimentalTypes.CenterProps, true>>;
/** @experimental This component is experimental. Avoid using it in production due to potential breaking changes. Your feedback is valuable for improvements. Stay tuned for updates. */
declare const Grid: "Grid" & {
    readonly type?: "Grid" | undefined;
    readonly props?: experimentalTypes.GridProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Grid", experimentalTypes.GridProps, true>>;
/** @experimental This component is experimental. Avoid using it in production due to potential breaking changes. Your feedback is valuable for improvements. Stay tuned for updates. */
declare const GridItem: "GridItem" & {
    readonly type?: "GridItem" | undefined;
    readonly props?: experimentalTypes.GridItemProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"GridItem", experimentalTypes.GridItemProps, true>>;
declare const SettingsView: "SettingsView" & {
    readonly type?: "SettingsView" | undefined;
    readonly props?: experimentalTypes.SettingsViewProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"SettingsView", experimentalTypes.SettingsViewProps, true>>;
/**
 * The `ExpandableText` component renders a text that can be expanded or collapsed based on a maximum height.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/expandable-text ExpandableText Docs}
 */
declare const ExpandableText: "ExpandableText" & {
    readonly type?: "ExpandableText" | undefined;
    readonly props?: experimentalTypes.ExpandableTextProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ExpandableText", experimentalTypes.ExpandableTextProps, true>>;
/**
 * The `Popover` component renders a popover overlay that can contain other components.
 *
 * **Links:**
 *
 * - {@link https://developers.hubspot.com/docs/reference/ui-components/standard-components/popover Popover Docs}
 */
declare const Popover: "Popover" & {
    readonly type?: "Popover" | undefined;
    readonly props?: experimentalTypes.PopoverProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Popover", experimentalTypes.PopoverProps, true>>;
declare const FileInput: "FileInput" & {
    readonly type?: "FileInput" | undefined;
    readonly props?: experimentalTypes.FileInputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"FileInput", experimentalTypes.FileInputProps, true>>;
export { Iframe, MediaObject, Stack2, Center, GridItem, Grid, SettingsView, ExpandableText, Popover, FileInput, };
